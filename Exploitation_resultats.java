package exploitation_resultats;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class Exploitation_resultats {
	public static void main (String args[]) {
		String implem;
		int [] nb_joueurs_SummonerElo0;
		int [] nb_joueurs_Latence0;
		double [] nb_joueurs_Distance0;
		int [] nb_joueurs_Temps0;
		double [] distanceMoyenne;
		int [] temps_moyen;
		int [] temps_tot;
		
		
		for (int i = 0; i < 3; i++) {
			nb_joueurs_SummonerElo0 = new int[10];
			nb_joueurs_Latence0 = new int [10];
			nb_joueurs_Distance0 = new double[10];
			nb_joueurs_Temps0 = new int[10];
			distanceMoyenne = new double[10];
			temps_moyen = new int [10];
			temps_tot = new int [10];
		
			if (i == 0) {
				implem = "random";
			}
			else if (i == 1) {
				implem = "naif";
			}
			else {
				implem = "BD_Spatiale";
			}
			BufferedReader br[] = new BufferedReader[10];
			BufferedReader br1[] = new BufferedReader[10];
			InputStream ips;
			InputStreamReader ipsr; 
			String lu;
			String[] elts;
			for (int j = 0; j < 10; j++) {
				try {
					nb_joueurs_SummonerElo0[j] = 0;
					nb_joueurs_Latence0[j] = 0;
					nb_joueurs_Distance0[j] = 0;
					nb_joueurs_Temps0[j] = 0;
					distanceMoyenne[j] = 0;
					temps_moyen[j] = 0;
					temps_tot[j] = 0;
					
					
					ips = new FileInputStream("statistiques_joueurs_" + implem + j + ".csv");
					ipsr = new InputStreamReader(ips);
					br[j] = new BufferedReader(ipsr);
					
					try {
						while ((lu = br[j].readLine()) != null) {
							elts = lu.split(",");
							int summonerElo1 = Integer.parseInt(elts[1]);
							int summonerElo2 = Integer.parseInt(elts[6]);
							int latence1 = Integer.parseInt(elts[2]);
							int latence2 = Integer.parseInt(elts[7]);
							int temps1 = Integer.parseInt(elts[4]);
							int temps2 = Integer.parseInt(elts[9]);
							double distance = 0;
							
							if ((summonerElo1 - summonerElo2) == 0) {
								nb_joueurs_SummonerElo0[j]++;
							}
							if ((latence1 - latence2) == 0) {
								nb_joueurs_Latence0[j]++;
							}
							if ((distance = distance(summonerElo1, latence1, summonerElo2, latence2)) == 0) {
								nb_joueurs_Distance0[j]++;
							}
							if (temps1 == 0) {
								nb_joueurs_Temps0[j]++;
							}
							if (temps2 == 0) {
								nb_joueurs_Temps0[j]++;
							}
							distanceMoyenne[j] += distance;
							temps_moyen[j] = temps_moyen[j] + temps1 + temps2; 
						}
						ips = new FileInputStream("statistiques_" + implem + "_temps" + j + ".csv");
						ipsr = new InputStreamReader(ips);
						br1[j] = new BufferedReader(ipsr);
						
						while ((lu = br1[j].readLine()) != null) {
							temps_tot[j] += Integer.parseInt(lu);
						}
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
										
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
			}
			
			suppr_min_max_int(nb_joueurs_SummonerElo0);
			suppr_min_max_int (nb_joueurs_Latence0);
			suppr_min_max_double(nb_joueurs_Distance0);
			suppr_min_max_int(nb_joueurs_Temps0);
			suppr_min_max_double(distanceMoyenne);
			suppr_min_max_int(temps_moyen);
			suppr_min_max_int (temps_tot);
			
			System.out.println("Statistiques pour l'implémentation " + implem);
			System.out.println("temps total d'éxécution");
			afficheResInt(temps_tot);
			System.out.println("nombre de paires de joueurs matchés ensembles dont l'écart summonerElo = 0");
			afficheResInt(nb_joueurs_SummonerElo0);
			System.out.println("nombre de paires de joueurs matchés ensembles dont l'écart de latence = 0");
			afficheResInt(nb_joueurs_Latence0);
			System.out.println("nombre de paires de joueurs matchés ensembles dont l'écart de distance = 0");
			afficheResDouble(nb_joueurs_Distance0);
			System.out.println("nombre de joueurs matchés au bout de 0 secondes");
			afficheResInt(nb_joueurs_Temps0);
			System.out.println("distance moyenne entre les paires de joueurs matchés ensembles");
			afficheResDouble(distanceMoyenne);
			System.out.println("temps moyen de matches des joueurs");
			afficheResInt(temps_moyen);
		}
	}
	
	public static double distance (int summonerElo1, int latence1, int summonerElo2, int latence2) {
		return Math.sqrt(Math.pow((summonerElo1 - summonerElo2), 2) + Math.pow((latence1 - latence2), 2));
	}
	
	public static void suppr_min_max_int (int tab[]) {
		int min = Integer.MAX_VALUE;
		int max = Integer.MIN_VALUE;
		int indice_min = 0;
		int indice_max = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] < min) {
				min = tab[i];
				indice_min = i;
			}
			if (tab[i] > max) {
				max = tab[i];
				indice_max = i;
			}
		}
		tab[indice_min] = -1;
		tab[indice_max] = -1;
	}
	
	public static void suppr_min_max_double (double tab[]) {
		double min = Double.MAX_VALUE;
		double max = Double.MIN_VALUE;
		int indice_min = 0;
		int indice_max = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] < min) {
				min = tab[i];
				indice_min = i;
			}
			if (tab[i] > max) {
				max = tab[i];
				indice_max = i;
			}
		}
		tab[indice_min] = -1;
		tab[indice_max] = -1;
	}
	
	
	public static void afficheResInt (int tab[]) {
		int somme = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				System.out.println(tab[i]);
				somme += tab[i];
			}
		}
		System.out.println("moyenne: " + (somme / (tab.length - 2)));
	}
	
	public static void afficheResDouble (double tab[]) {
		double somme = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				System.out.println(tab[i]);
				somme += tab[i];
			}
		}
		System.out.println("moyenne: " + (somme / (tab.length - 2)));
	}
}

















