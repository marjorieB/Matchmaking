package centralise_5V5_utilitaire;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class Exploitation_resultats {
	
	public static void main (String args[]) {
		FileWriter fw = null;
		InputStream ips;
		InputStreamReader ipsr;
		BufferedReader br; 
		BufferedReader br1;
		String implem;
		long moyenneEloTeam[] = new long[10];
		double ecartTypeMoyenEloTeam[] = new double[10];
		double ecartTypeEloTeamInter;
		long moyenneLatenceTeam[] = new long[10];
		double ecartTypeMoyenLatenceTeam[] = new double[10];
		double ecartTypeLatenceTeamInter;
		long moyenneTempsMatch[] = new long[10];
		double ecartTypeTempsMatchIntra[] = new double[10];
		double ecartTypeTempsMatchInter;
		double moyenneDistanceTeamAdv[] = new double[10];
		double ecartTypeDistanceTeamAdvIntra[] = new double[10];
		double ecartTypeDistanceTeamAdvInter;
		long moyenneTempsTot[] = new long[10];
		double ecartTypeTempsTot;
		
		try {
			fw = new FileWriter("resultats_5V5_centralise");
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		for (int i = 0; i < 3; i++) {
			if (i == 0) {
				implem = "random";
			}
			else {
				implem = "naif";
			}
			for (int k = 0; k < 10; k++) {
				String lu;
				String proprietes[];
				try {
					ips = new FileInputStream("statistiques_joueurs_5V5_" + implem + "_" + k + ".csv");
					ipsr = new InputStreamReader(ips);
					br = new BufferedReader(ipsr);
				
					//lecture de l'entête
					br.readLine();
					
					while ((lu = br.readLine()) != null) {
						proprietes = lu.split(",");
						int moyenne = 0;
						int moyenneElo1 = 0;
						int moyenneElo2 = 0;
						int moyenneLatence1 = 0;
						int moyenneLatence2 = 0;
						int ecartType = 0;
						
						//statistiques pour le summonerElo
						for (int j = 1; j <= 24; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);	
						}
						moyenneElo1 = moyenne / 5;
						moyenneEloTeam[k] += moyenneElo1;
						for (int j = 1; j <= 24; j += 5) {
							ecartType += Math.pow(Integer.parseInt(proprietes[j]) - moyenne, 2);
						}
						ecartTypeMoyenEloTeam[k] += Math.sqrt(ecartType/5);
						
						moyenne = 0;
						ecartType = 0;
						for (int j = 26; j <= 49; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);
						}
						moyenneElo2 = moyenne / 5;
						moyenneEloTeam[k] += moyenneElo2;
						for (int j = 26; j <= 49; j += 5) {
							ecartType += Math.pow(Integer.parseInt(proprietes[j]) - moyenne, 2);
						}
						ecartTypeMoyenEloTeam[k] += Math.sqrt(ecartType/5);
						
						// statistiques pour la latence
						moyenne = 0;
						ecartType = 0;
						for (int j = 2; j <= 24; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);	
						}
						moyenneLatence1 = moyenne / 5;
						moyenneLatenceTeam[k] += moyenneLatence1;
						for (int j = 2; j <= 24; j += 5) {
							ecartType += Math.pow(Integer.parseInt(proprietes[j]) - moyenne, 2);
						}
						ecartTypeMoyenLatenceTeam[k] += Math.sqrt(ecartType/5);
						
						moyenne = 0;
						ecartType = 0;
						for (int j = 27; j <= 49; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);
						}
						moyenneLatence2 = moyenne / 5;
						moyenneLatenceTeam[k] += moyenneLatence2;
						for (int j = 27; j <= 49; j += 5) {
							ecartType += Math.pow(Integer.parseInt(proprietes[j]) - moyenne, 2);
						}
						ecartTypeMoyenLatenceTeam[k] += Math.sqrt(ecartType/5);
						
						//statistiques pour le temps de matchmaking des joueurs
						for (int j = 4; j <= 49; j += 5) {
							moyenneTempsMatch[k] += Integer.parseInt(proprietes[j]);
						}
						
						//statistique pour la distance entre les équipes adverses
						for (int j = 1; j <= 49; j += 5) {
							moyenneDistanceTeamAdv[k] += distance(moyenneElo1,moyenneLatence1, moyenneElo2, moyenneLatence2);
						}						
					}
					ips.close();
					ips = new FileInputStream("statistiques_joueurs_5V5_" + implem + "_" + k + ".csv");
					ipsr = new InputStreamReader(ips);
					br = new BufferedReader(ipsr);
				
					//lecture de l'entête
					br.readLine();
					
					while ((lu = br.readLine()) != null) {
						proprietes = lu.split(",");
						int moyenne = 0;
						int moyenneElo1 = 0;
						int moyenneElo2 = 0;
						int moyenneLatence1 = 0;
						int moyenneLatence2 = 0;
						
						//statistiques pour le summonerElo
						for (int j = 1; j <= 24; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);	
						}
						moyenneElo1 = moyenne / 5;
						moyenne = 0;
						for (int j = 26; j <= 49; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);
						}
						moyenneElo2 = moyenne / 5;
						moyenne = 0;
						for (int j = 2; j <= 24; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);	
						}
						moyenneLatence1 = moyenne / 5;
						moyenne = 0;
						for (int j = 27; j <= 49; j += 5) {
							moyenne += Integer.parseInt(proprietes[j]);
						}
						moyenneLatence2 = moyenne / 5;
						for (int j = 4; j <= 49; j+= 5) {
							ecartTypeTempsMatchIntra[k] += Math.pow((Integer.parseInt(proprietes[j]) - moyenneTempsMatch[k]), 2);
							ecartTypeDistanceTeamAdvIntra[k] += Math.pow((distance(moyenneElo1,moyenneLatence1, moyenneElo2, moyenneLatence2) - moyenneDistanceTeamAdv[k]), 2);
						}
					}	
						
					ips.close();
					ips = new FileInputStream("Statistiques_" + implem + "_5V5_temps" + k + ".csv");
					ipsr = new InputStreamReader(ips);
					br1 = new BufferedReader(ipsr);
				
					//lecture de l'entête
					br1.readLine();
					
					while ((lu = br1.readLine()) != null) {
						//statistiques pour le temps total
						moyenneTempsTot[k] = Long.parseLong(lu);					
					}
								
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}catch (IOException e) {
					e.printStackTrace();				
				} 				
			}

			suppr_min_max_int(moyenneEloTeam);
			suppr_min_max_int (moyenneLatenceTeam);
			suppr_min_max_int(moyenneTempsMatch);
			suppr_min_max_double(moyenneDistanceTeamAdv);
			suppr_min_max_int(moyenneTempsTot);
			suppr_min_max_double(ecartTypeMoyenEloTeam);
			suppr_min_max_double(ecartTypeMoyenLatenceTeam);
			suppr_min_max_double(ecartTypeTempsMatchIntra);
			suppr_min_max_double(ecartTypeDistanceTeamAdvIntra);
			
			// calculs des écarts-type
			ecartTypeEloTeamInter = calculEcartType(moyenneEloTeam);
			ecartTypeLatenceTeamInter = calculEcartType(moyenneLatenceTeam);
			ecartTypeTempsMatchInter = calculEcartType(moyenneTempsMatch);
			ecartTypeTempsTot = calculEcartType(moyenneTempsTot);
			ecartTypeDistanceTeamAdvInter = calculEcartTypeDouble(moyenneDistanceTeamAdv);
			
					
			try {
				fw.write("\n\nStatistiques pour l'implémentation " + implem + "\n");
				
				fw.write("temps total d'exécution\n");
				fw.flush();
				afficheResInt(moyenneTempsTot, fw);
				fw.write("écart-type temps total = " + ecartTypeTempsTot + "\n");
				fw.flush();
				
				fw.write("moyenne des summonerElo au sein d'une même équipe\n");
				fw.flush();
				afficheResInt(moyenneEloTeam, fw);
				fw.write("écart-type intra exécution des summonerElo au sein d'une même équipe\n");
				fw.flush();
				afficheResDouble(ecartTypeMoyenEloTeam, fw);
				fw.write("écart-type inter exécution des summonerElo au sein d'une même équipe = " + ecartTypeEloTeamInter + "\n");
				fw.flush();
				
				fw.write("moyenne des Latences au sein d'une même équipe\n");
				fw.flush();
				afficheResInt(moyenneLatenceTeam, fw);
				fw.write("écart-type intra exécution des Latence au sein d'une même équipe\n");
				fw.flush();
				afficheResDouble(ecartTypeMoyenLatenceTeam, fw);
				fw.write("écart-type inter exécution des summonerElo au sein d'une même équipe = " + ecartTypeLatenceTeamInter + "\n");
				fw.flush();
				
				fw.write("temps moyen pour que les joueurs soient assignés à une équipe et matchés contre une autre\n");
				fw.flush();
				afficheResInt(moyenneTempsMatch, fw);
				fw.write("écart-type intra exécution du temps de matchmaking des joueurs\n");
				afficheResDouble(ecartTypeTempsMatchIntra, fw);
				fw.flush();
				fw.write("écart-type inter exécution du temps de matchmaking des joueurs = " + ecartTypeTempsMatchInter + "\n");
				fw.flush();
				
				fw.write("distance moyenne (summonerElo et latence) entre les joueurs des équipes adverses\n");
				fw.flush();
				afficheResDouble(moyenneDistanceTeamAdv, fw);
				fw.write("écart-type intra exécution de la distance moyenne entre les joueurs des équipes adverses\n");
				afficheResDouble(ecartTypeTempsMatchIntra, fw);
				fw.flush();
				fw.write("écart-type inter exécution de la distance moyenne entre les joueurs des équipes adverses = " + ecartTypeDistanceTeamAdvInter + "\n");
				fw.flush();
				
				
			} catch (IOException e1) {
				e1.printStackTrace();
			}		
		}
	}
	public static double distance (int summonerElo1, int latence1, int summonerElo2, int latence2) {
		return Math.sqrt(Math.pow((summonerElo1 - summonerElo2), 2) + Math.pow((latence1 - latence2), 2));
	}
	
	public static void suppr_min_max_int (long tab[]) {
		long min = Integer.MAX_VALUE;
		long max = Integer.MIN_VALUE;
		int indice_min = 0;
		int indice_max = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] < min) {
				min = tab[i];
				indice_min = i;
			}
			if (tab[i] > max) {
				max = tab[i];
				indice_max = i;
			}
		}
		tab[indice_min] = -1;
		tab[indice_max] = -1;
	}
	
	public static void suppr_min_max_double (double tab[]) {
		double min = Double.MAX_VALUE;
		double max = Double.MIN_VALUE;
		int indice_min = 0;
		int indice_max = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] < min) {
				min = tab[i];
				indice_min = i;
			}
			if (tab[i] > max) {
				max = tab[i];
				indice_max = i;
			}
		}
		tab[indice_min] = -1;
		tab[indice_max] = -1;
	}
	
	
	public static void afficheResInt (long tab[], FileWriter fw) {
		long somme = 0;
		
		try {
			for (int i = 0; i < tab.length; i++) {
				if (tab[i] != -1) {
					fw.write(tab[i] + "\n");
					fw.flush();
					somme += tab[i];
				}
			}
			fw.write("moyenne: " + (somme / (tab.length - 2)) + "\n");
			fw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void afficheResDouble (double tab[], FileWriter fw) {
		double somme = 0;
		
		try {
			for (int i = 0; i < tab.length; i++) {
				if (tab[i] != -1) {
					fw.write(tab[i] + "\n");
					fw.flush();
					somme += tab[i];
				}
			}
			fw.write("moyenne: " + (somme / (tab.length - 2)) + "\n");
			fw.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static double calculEcartType(long tab[]) {
		long moyenne = 0;
		double res = 0;
		int nb = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				moyenne += tab[i];
			}
			else {
				nb++;
			}
		}
		moyenne = moyenne / (tab.length - nb);
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				res += Math.pow(tab[i] - moyenne, 2);
			}
		}
		res = Math.sqrt(res / (tab.length - nb));
		
		return res;
	}
	public static double calculEcartTypeDouble(double tab[]) {
		double moyenne = 0;
		double res = 0;
		int nb = 0;
		
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				moyenne += tab[i];
			}
			else {
				nb++;
			}
		}
		moyenne = moyenne / (tab.length - nb);
		for (int i = 0; i < tab.length; i++) {
			if (tab[i] != -1) {
				res += Math.pow(tab[i] - moyenne, 2);
			}
		}
		res = Math.sqrt(res / (tab.length - nb));
		
		return res;
	}
}